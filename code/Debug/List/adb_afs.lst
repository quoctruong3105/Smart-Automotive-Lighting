
AVRASM ver. 2.1.30  E:\Projects\Smart Automotive Lighting\code\Debug\List\adb_afs.asm Wed Sep 28 08:28:44 2022

                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega328P
                 ;Program type           : Application
                 ;Clock frequency        : 8,000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega328P
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU EECR=0x1F
                 	.EQU EEDR=0x20
                 	.EQU EEARL=0x21
                 	.EQU EEARH=0x22
                 	.EQU SPSR=0x2D
                 	.EQU SPDR=0x2E
                 	.EQU SMCR=0x33
                 	.EQU MCUSR=0x34
                 	.EQU MCUCR=0x35
                 	.EQU WDTCSR=0x60
                 	.EQU UCSR0A=0xC0
                 	.EQU UDR0=0xC6
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU GPIOR0=0x1E
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x08FF
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;GPIOR0 INITIALIZATION VALUE
                 	.EQU __GPIOR0_INIT=0x00
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0034 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
                 
                 __RESET:
000034 94f8      	CLI
000035 27ee      	CLR  R30
000036 bbef      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000037 e0f1      	LDI  R31,1
000038 bff5      	OUT  MCUCR,R31
000039 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
00003a e08d      	LDI  R24,(14-2)+1
00003b e0a2      	LDI  R26,2
00003c 27bb      	CLR  R27
                 __CLEAR_REG:
00003d 93ed      	ST   X+,R30
00003e 958a      	DEC  R24
00003f f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000040 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000041 e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000042 e0a0      	LDI  R26,LOW(__SRAM_START)
000043 e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
000044 93ed      	ST   X+,R30
000045 9701      	SBIW R24,1
000046 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GPIOR0 INITIALIZATION
000047 e0e0      	LDI  R30,__GPIOR0_INIT
000048 bbee      	OUT  GPIOR0,R30
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000049 efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00004a bfed      	OUT  SPL,R30
00004b e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00004c bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00004d e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00004e e0d3      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00004f 940c 00d1 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x300
                 
                 	.CSEG
                 ;#include <mega328p.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x01
                 	.EQU __sm_mask=0x0E
                 	.EQU __sm_adc_noise_red=0x02
                 	.EQU __sm_powerdown=0x04
                 	.EQU __sm_powersave=0x06
                 	.EQU __sm_standby=0x0C
                 	.EQU __sm_ext_standby=0x0E
                 	.SET power_ctrl_reg=smcr
                 	#endif
                 ;#include <delay.h>
                 ;
                 ;#define ADC_VREF_TYPE ((0<<REFS1) | (1<<REFS0) | (0<<ADLAR))
                 ;#define sbi(port,bit) (port) |= (1<<(bit))
                 ;#define cbi(port,bit) (port) &=~ (1<<(bit))
                 ;#define range(i) i
                 ;
                 ;
                 ;// Read the AD conversion result
                 ;unsigned int read_adc(unsigned char adc_input)
                 ; 0000 000C {
                 
                 	.CSEG
                 _read_adc:
                 ; .FSTART _read_adc
                 ; 0000 000D ADMUX=adc_input | ADC_VREF_TYPE;
000051 93aa      	ST   -Y,R26
                 ;	adc_input -> Y+0
000052 81e8      	LD   R30,Y
000053 64e0      	ORI  R30,0x40
000054 93e0 007c 	STS  124,R30
                 ; 0000 000E // Delay needed for the stabilization of the ADC input voltage
                 ; 0000 000F delay_us(10);
                +
000056 e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
000057 958a     +DEC R24
000058 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
                 ; 0000 0010 // Start the AD conversion
                 ; 0000 0011 ADCSRA|=(1<<ADSC);
000059 91e0 007a 	LDS  R30,122
00005b 64e0      	ORI  R30,0x40
00005c 93e0 007a 	STS  122,R30
                 ; 0000 0012 // Wait for the AD conversion to complete
                 ; 0000 0013 while ((ADCSRA & (1<<ADIF))==0);
                 _0x3:
00005e 91e0 007a 	LDS  R30,122
000060 71e0      	ANDI R30,LOW(0x10)
000061 f3e1      	BREQ _0x3
                 ; 0000 0014 ADCSRA|=(1<<ADIF);
000062 91e0 007a 	LDS  R30,122
000064 61e0      	ORI  R30,0x10
000065 93e0 007a 	STS  122,R30
                 ; 0000 0015 return ADCW;
000067 91e0 0078 	LDS  R30,120
000069 91f0 0079 	LDS  R31,120+1
00006b 9621      	ADIW R28,1
00006c 9508      	RET
                 ; 0000 0016 }
                 ; .FEND
                 ;
                 ;
                 ;void lightControl()
                 ; 0000 001A {
                 _lightControl:
                 ; .FSTART _lightControl
                 ; 0000 001B      unsigned int i, j;
                 ; 0000 001C 
                 ; 0000 001D      // High beam
                 ; 0000 001E      for(j = 0; j < 4; j++)
00006d 940e 028c 	CALL __SAVELOCR4
                 ;	i -> R16,R17
                 ;	j -> R18,R19
                +
00006f e020     +LDI R18 , LOW ( 0 )
000070 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 _0x7:
                +
000071 3024     +CPI R18 , LOW ( 4 )
000072 e0e0     +LDI R30 , HIGH ( 4 )
000073 073e     +CPC R19 , R30
                 	__CPWRN 18,19,4
000074 f548      	BRSH _0x8
                 ; 0000 001F      {
                 ; 0000 0020           for(i = 0; i < 5; i++)
                +
000075 e000     +LDI R16 , LOW ( 0 )
000076 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0xA:
                +
000077 3005     +CPI R16 , LOW ( 5 )
000078 e0e0     +LDI R30 , HIGH ( 5 )
000079 071e     +CPC R17 , R30
                 	__CPWRN 16,17,5
00007a f470      	BRSH _0xB
                 ; 0000 0021           {
                 ; 0000 0022                if(read_adc(i) < 512)
00007b d09b      	RCALL SUBOPT_0x0
00007c f418      	BRSH _0xC
                 ; 0000 0023                {
                 ; 0000 0024                     sbi(PORTD,range(i));
00007d d09f      	RCALL SUBOPT_0x1
00007e 29e1      	OR   R30,R1
00007f c005      	RJMP _0x24
                 ; 0000 0025                }
                 ; 0000 0026                else if(read_adc(i) >= 512)
                 _0xC:
000080 d096      	RCALL SUBOPT_0x0
000081 f020      	BRLO _0xE
                 ; 0000 0027                {
                 ; 0000 0028                     cbi(PORTD,range(i));
000082 d09a      	RCALL SUBOPT_0x1
000083 95e0      	COM  R30
000084 21e1      	AND  R30,R1
                 _0x24:
000085 b9eb      	OUT  0xB,R30
                 ; 0000 0029                }
                 ; 0000 002A           }
                 _0xE:
                +
000086 5f0f     +SUBI R16 , LOW ( - 1 )
000087 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000088 cfee      	RJMP _0xA
                 _0xB:
                 ; 0000 002B           if(PORTD4 == 0 && PORTD3 == 0 && PORTD2 == 0 && PORTD1 == 0 && PORTD0 == 0)
000089 e0e0      	LDI  R30,LOW(0)
00008a 30e0      	CPI  R30,0
00008b f049      	BREQ _0x10
00008c 30e0      	CPI  R30,0
00008d f039      	BREQ _0x10
00008e 30e0      	CPI  R30,0
00008f f029      	BREQ _0x10
000090 30e0      	CPI  R30,0
000091 f019      	BREQ _0x10
000092 e0e1      	LDI  R30,LOW(1)
000093 30e0      	CPI  R30,0
000094 f409      	BRNE _0x11
                 _0x10:
000095 c001      	RJMP _0xF
                 _0x11:
                 ; 0000 002C           {
                 ; 0000 002D                break;
000096 c007      	RJMP _0x8
                 ; 0000 002E           }
                 ; 0000 002F           cbi(PORTB,j);
                 _0xF:
000097 d08b      	RCALL SUBOPT_0x2
000098 d090      	RCALL SUBOPT_0x3
                 ; 0000 0030           delay_ms(1);
                 ; 0000 0031           sbi(PORTB,j);
000099 29e1      	OR   R30,R1
00009a b9e5      	OUT  0x5,R30
                 ; 0000 0032      }
                +
00009b 5f2f     +SUBI R18 , LOW ( - 1 )
00009c 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
00009d cfd3      	RJMP _0x7
                 _0x8:
                 ; 0000 0033 
                 ; 0000 0034 
                 ; 0000 0035      // Low beam
                 ; 0000 0036      for(j = 4; j < 7; j++)
                +
00009e e024     +LDI R18 , LOW ( 4 )
00009f e030     +LDI R19 , HIGH ( 4 )
                 	__GETWRN 18,19,4
                 _0x13:
                +
0000a0 3027     +CPI R18 , LOW ( 7 )
0000a1 e0e0     +LDI R30 , HIGH ( 7 )
0000a2 073e     +CPC R19 , R30
                 	__CPWRN 18,19,7
0000a3 f548      	BRSH _0x14
                 ; 0000 0037      {
                 ; 0000 0038           for(i = 0; i < 5; i++)
                +
0000a4 e000     +LDI R16 , LOW ( 0 )
0000a5 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x16:
                +
0000a6 3005     +CPI R16 , LOW ( 5 )
0000a7 e0e0     +LDI R30 , HIGH ( 5 )
0000a8 071e     +CPC R17 , R30
                 	__CPWRN 16,17,5
0000a9 f470      	BRSH _0x17
                 ; 0000 0039           {
                 ; 0000 003A                if(read_adc(i) >= 512)
0000aa d06c      	RCALL SUBOPT_0x0
0000ab f018      	BRLO _0x18
                 ; 0000 003B                {
                 ; 0000 003C                     sbi(PORTD,range(i));
0000ac d070      	RCALL SUBOPT_0x1
0000ad 29e1      	OR   R30,R1
0000ae c005      	RJMP _0x25
                 ; 0000 003D                }
                 ; 0000 003E                else if(read_adc(i) < 512)
                 _0x18:
0000af d067      	RCALL SUBOPT_0x0
0000b0 f420      	BRSH _0x1A
                 ; 0000 003F                {
                 ; 0000 0040                     cbi(PORTD,range(i));
0000b1 d06b      	RCALL SUBOPT_0x1
0000b2 95e0      	COM  R30
0000b3 21e1      	AND  R30,R1
                 _0x25:
0000b4 b9eb      	OUT  0xB,R30
                 ; 0000 0041                }
                 ; 0000 0042           }
                 _0x1A:
                +
0000b5 5f0f     +SUBI R16 , LOW ( - 1 )
0000b6 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
0000b7 cfee      	RJMP _0x16
                 _0x17:
                 ; 0000 0043           if(PORTD4 == 0 && PORTD3 == 0 && PORTD2 == 0 && PORTD1 == 0 && PORTD0 == 0)
0000b8 e0e0      	LDI  R30,LOW(0)
0000b9 30e0      	CPI  R30,0
0000ba f049      	BREQ _0x1C
0000bb 30e0      	CPI  R30,0
0000bc f039      	BREQ _0x1C
0000bd 30e0      	CPI  R30,0
0000be f029      	BREQ _0x1C
0000bf 30e0      	CPI  R30,0
0000c0 f019      	BREQ _0x1C
0000c1 e0e1      	LDI  R30,LOW(1)
0000c2 30e0      	CPI  R30,0
0000c3 f409      	BRNE _0x1D
                 _0x1C:
0000c4 c001      	RJMP _0x1B
                 _0x1D:
                 ; 0000 0044           {
                 ; 0000 0045                break;
0000c5 c007      	RJMP _0x14
                 ; 0000 0046           }
                 ; 0000 0047           cbi(PORTB,j);
                 _0x1B:
0000c6 d05c      	RCALL SUBOPT_0x2
0000c7 d061      	RCALL SUBOPT_0x3
                 ; 0000 0048           delay_ms(1);
                 ; 0000 0049           sbi(PORTB,j);
0000c8 29e1      	OR   R30,R1
0000c9 b9e5      	OUT  0x5,R30
                 ; 0000 004A      }
                +
0000ca 5f2f     +SUBI R18 , LOW ( - 1 )
0000cb 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
0000cc cfd3      	RJMP _0x13
                 _0x14:
                 ; 0000 004B }
0000cd 940e 0291 	CALL __LOADLOCR4
0000cf 9624      	ADIW R28,4
0000d0 9508      	RET
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 004E {
                 _main:
                 ; .FSTART _main
                 ; 0000 004F float steerAngle;
                 ; 0000 0050 
                 ; 0000 0051 // Crystal Oscillator division factor: 1
                 ; 0000 0052 #pragma optsize-
                 ; 0000 0053 CLKPR=(1<<CLKPCE);
0000d1 9724      	SBIW R28,4
                 ;	steerAngle -> Y+0
0000d2 e8e0      	LDI  R30,LOW(128)
0000d3 93e0 0061 	STS  97,R30
                 ; 0000 0054 CLKPR=(0<<CLKPCE) | (0<<CLKPS3) | (0<<CLKPS2) | (0<<CLKPS1) | (0<<CLKPS0);
0000d5 e0e0      	LDI  R30,LOW(0)
0000d6 93e0 0061 	STS  97,R30
                 ; 0000 0055 #ifdef _OPTIMIZE_SIZE_
                 ; 0000 0056 #pragma optsize+
                 ; 0000 0057 #endif
                 ; 0000 0058 
                 ; 0000 0059 // Set up for Matrix LED
                 ; 0000 005A DDRD =(1<<DDD4) | (1<<DDD3) | (1<<DDD2) | (1<<DDD1) | (1<<DDD0);
0000d8 e1ef      	LDI  R30,LOW(31)
0000d9 b9ea      	OUT  0xA,R30
                 ; 0000 005B DDRB =(1<<DDB6) | (1<<DDB5) | (1<<DDB4) | (1<<DDB3) | (1<<DDB2) | (1<<DDB1) | (1<<DDB0);
0000da e7ef      	LDI  R30,LOW(127)
0000db b9e4      	OUT  0x4,R30
                 ; 0000 005C 
                 ; 0000 005D // Timer/Counter 0 initialization
                 ; 0000 005E TCCR0A=0b00100011;
0000dc e2e3      	LDI  R30,LOW(35)
0000dd bde4      	OUT  0x24,R30
                 ; 0000 005F TCCR0B=0b00000101;
0000de e0e5      	LDI  R30,LOW(5)
0000df bde5      	OUT  0x25,R30
                 ; 0000 0060 TCNT0=0x00;
0000e0 e0e0      	LDI  R30,LOW(0)
0000e1 bde6      	OUT  0x26,R30
                 ; 0000 0061 OCR0A=0x00;
0000e2 bde7      	OUT  0x27,R30
                 ; 0000 0062 OCR0B=0x00;
0000e3 bde8      	OUT  0x28,R30
                 ; 0000 0063 
                 ; 0000 0064 // ADC initialization
                 ; 0000 0065 DIDR0=(1<<ADC5D) | (1<<ADC4D) | (1<<ADC3D) | (1<<ADC2D) | (1<<ADC1D) | (1<<ADC0D);
0000e4 e3ef      	LDI  R30,LOW(63)
0000e5 93e0 007e 	STS  126,R30
                 ; 0000 0066 ADMUX=ADC_VREF_TYPE;
0000e7 e4e0      	LDI  R30,LOW(64)
0000e8 93e0 007c 	STS  124,R30
                 ; 0000 0067 ADCSRA=(1<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
0000ea e8e3      	LDI  R30,LOW(131)
0000eb 93e0 007a 	STS  122,R30
                 ; 0000 0068 ADCSRB=(0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
0000ed e0e0      	LDI  R30,LOW(0)
0000ee 93e0 007b 	STS  123,R30
                 ; 0000 0069 
                 ; 0000 006A // Set up for Motors
                 ; 0000 006B DDRD.5 = 1;
0000f0 9a55      	SBI  0xA,5
                 ; 0000 006C 
                 ; 0000 006D while (1)
                 _0x20:
                 ; 0000 006E       {
                 ; 0000 006F           //ABD
                 ; 0000 0070           lightControl();
0000f1 df7b      	RCALL _lightControl
                 ; 0000 0071 
                 ; 0000 0072           //AFS
                 ; 0000 0073           steerAngle = 0.0879f*read_adc(5)+45;
0000f2 e0a5      	LDI  R26,LOW(5)
0000f3 df5d      	RCALL _read_adc
0000f4 2766      	CLR  R22
0000f5 2777      	CLR  R23
0000f6 940e 01a1 	CALL __CDF1
                +
0000f8 eeaa     +LDI R26 , LOW ( 0x3DB404EA )
0000f9 e0b4     +LDI R27 , HIGH ( 0x3DB404EA )
0000fa eb84     +LDI R24 , BYTE3 ( 0x3DB404EA )
0000fb e39d     +LDI R25 , BYTE4 ( 0x3DB404EA )
                 	__GETD2N 0x3DB404EA
0000fc 940e 0224 	CALL __MULF12
                +
0000fe e0a0     +LDI R26 , LOW ( 0x42340000 )
0000ff e0b0     +LDI R27 , HIGH ( 0x42340000 )
000100 e384     +LDI R24 , BYTE3 ( 0x42340000 )
000101 e492     +LDI R25 , BYTE4 ( 0x42340000 )
                 	__GETD2N 0x42340000
000102 940e 01d4 	CALL __ADDF12
000104 940e 0287 	CALL __PUTD1S0
                 ; 0000 0074           OCR0B = 0.0778f*steerAngle+8.5;
                +
000106 e9ab     +LDI R26 , LOW ( 0x3D9F559B )
000107 e5b5     +LDI R27 , HIGH ( 0x3D9F559B )
000108 e98f     +LDI R24 , BYTE3 ( 0x3D9F559B )
000109 e39d     +LDI R25 , BYTE4 ( 0x3D9F559B )
                 	__GETD2N 0x3D9F559B
00010a 940e 0224 	CALL __MULF12
                +
00010c e0a0     +LDI R26 , LOW ( 0x41080000 )
00010d e0b0     +LDI R27 , HIGH ( 0x41080000 )
00010e e088     +LDI R24 , BYTE3 ( 0x41080000 )
00010f e491     +LDI R25 , BYTE4 ( 0x41080000 )
                 	__GETD2N 0x41080000
000110 940e 01d4 	CALL __ADDF12
000112 940e 0168 	CALL __CFD1U
000114 bde8      	OUT  0x28,R30
                 ; 0000 0075       }
000115 cfdb      	RJMP _0x20
                 ; 0000 0076 }
                 _0x23:
000116 cfff      	RJMP _0x23
                 ; .FEND
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x0:
000117 2fa0      	MOV  R26,R16
000118 df38      	RCALL _read_adc
000119 30e0      	CPI  R30,LOW(0x200)
00011a e0a2      	LDI  R26,HIGH(0x200)
00011b 07fa      	CPC  R31,R26
00011c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x1:
00011d b01b      	IN   R1,11
00011e 2fe0      	MOV  R30,R16
00011f e0a1      	LDI  R26,LOW(1)
000120 940e 027a 	CALL __LSLB12
000122 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x2:
000123 b015      	IN   R1,5
000124 2fe2      	MOV  R30,R18
000125 e0a1      	LDI  R26,LOW(1)
000126 940e 027a 	CALL __LSLB12
000128 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x3:
000129 95e0      	COM  R30
00012a 21e1      	AND  R30,R1
00012b b9e5      	OUT  0x5,R30
00012c e0a1      	LDI  R26,LOW(1)
00012d e0b0      	LDI  R27,0
00012e 940e 0131 	CALL _delay_ms
000130 cff2      	RJMP SUBOPT_0x2
                 
                 
                 	.CSEG
                 _delay_ms:
000131 9610      	adiw r26,0
000132 f039      	breq __delay_ms1
                 __delay_ms0:
                +
000133 ed80     +LDI R24 , LOW ( 0x7D0 )
000134 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
000135 9701     +SBIW R24 , 1
000136 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
000137 95a8      	wdr
000138 9711      	sbiw r26,1
000139 f7c9      	brne __delay_ms0
                 __delay_ms1:
00013a 9508      	ret
                 
                 __ROUND_REPACK:
00013b 2355      	TST  R21
00013c f442      	BRPL __REPACK
00013d 3850      	CPI  R21,0x80
00013e f411      	BRNE __ROUND_REPACK0
00013f ffe0      	SBRS R30,0
000140 c004      	RJMP __REPACK
                 __ROUND_REPACK0:
000141 9631      	ADIW R30,1
000142 1f69      	ADC  R22,R25
000143 1f79      	ADC  R23,R25
000144 f06b      	BRVS __REPACK1
                 
                 __REPACK:
000145 e850      	LDI  R21,0x80
000146 2757      	EOR  R21,R23
000147 f411      	BRNE __REPACK0
000148 935f      	PUSH R21
000149 c0c8      	RJMP __ZERORES
                 __REPACK0:
00014a 3f5f      	CPI  R21,0xFF
00014b f031      	BREQ __REPACK1
00014c 0f66      	LSL  R22
00014d 0c00      	LSL  R0
00014e 9557      	ROR  R21
00014f 9567      	ROR  R22
000150 2f75      	MOV  R23,R21
000151 9508      	RET
                 __REPACK1:
000152 935f      	PUSH R21
000153 2000      	TST  R0
000154 f00a      	BRMI __REPACK2
000155 c0c8      	RJMP __MAXRES
                 __REPACK2:
000156 c0c1      	RJMP __MINRES
                 
                 __UNPACK:
000157 e850      	LDI  R21,0x80
000158 2e19      	MOV  R1,R25
000159 2215      	AND  R1,R21
00015a 0f88      	LSL  R24
00015b 1f99      	ROL  R25
00015c 2795      	EOR  R25,R21
00015d 0f55      	LSL  R21
00015e 9587      	ROR  R24
                 
                 __UNPACK1:
00015f e850      	LDI  R21,0x80
000160 2e07      	MOV  R0,R23
000161 2205      	AND  R0,R21
000162 0f66      	LSL  R22
000163 1f77      	ROL  R23
000164 2775      	EOR  R23,R21
000165 0f55      	LSL  R21
000166 9567      	ROR  R22
000167 9508      	RET
                 
                 __CFD1U:
000168 9468      	SET
000169 c001      	RJMP __CFD1U0
                 __CFD1:
00016a 94e8      	CLT
                 __CFD1U0:
00016b 935f      	PUSH R21
00016c dff2      	RCALL __UNPACK1
00016d 3870      	CPI  R23,0x80
00016e f018      	BRLO __CFD10
00016f 3f7f      	CPI  R23,0xFF
000170 f408      	BRCC __CFD10
000171 c0a0      	RJMP __ZERORES
                 __CFD10:
000172 e156      	LDI  R21,22
000173 1b57      	SUB  R21,R23
000174 f4aa      	BRPL __CFD11
000175 9551      	NEG  R21
000176 3058      	CPI  R21,8
000177 f40e      	BRTC __CFD19
000178 3059      	CPI  R21,9
                 __CFD19:
000179 f030      	BRLO __CFD17
00017a efef      	SER  R30
00017b efff      	SER  R31
00017c ef6f      	SER  R22
00017d e77f      	LDI  R23,0x7F
00017e f977      	BLD  R23,7
00017f c01a      	RJMP __CFD15
                 __CFD17:
000180 2777      	CLR  R23
000181 2355      	TST  R21
000182 f0b9      	BREQ __CFD15
                 __CFD18:
000183 0fee      	LSL  R30
000184 1fff      	ROL  R31
000185 1f66      	ROL  R22
000186 1f77      	ROL  R23
000187 955a      	DEC  R21
000188 f7d1      	BRNE __CFD18
000189 c010      	RJMP __CFD15
                 __CFD11:
00018a 2777      	CLR  R23
                 __CFD12:
00018b 3058      	CPI  R21,8
00018c f028      	BRLO __CFD13
00018d 2fef      	MOV  R30,R31
00018e 2ff6      	MOV  R31,R22
00018f 2f67      	MOV  R22,R23
000190 5058      	SUBI R21,8
000191 cff9      	RJMP __CFD12
                 __CFD13:
000192 2355      	TST  R21
000193 f031      	BREQ __CFD15
                 __CFD14:
000194 9576      	LSR  R23
000195 9567      	ROR  R22
000196 95f7      	ROR  R31
000197 95e7      	ROR  R30
000198 955a      	DEC  R21
000199 f7d1      	BRNE __CFD14
                 __CFD15:
00019a 2000      	TST  R0
00019b f40a      	BRPL __CFD16
00019c d0d5      	RCALL __ANEGD1
                 __CFD16:
00019d 915f      	POP  R21
00019e 9508      	RET
                 
                 __CDF1U:
00019f 9468      	SET
0001a0 c001      	RJMP __CDF1U0
                 __CDF1:
0001a1 94e8      	CLT
                 __CDF1U0:
0001a2 9730      	SBIW R30,0
0001a3 4060      	SBCI R22,0
0001a4 4070      	SBCI R23,0
0001a5 f0b1      	BREQ __CDF10
0001a6 2400      	CLR  R0
0001a7 f026      	BRTS __CDF11
0001a8 2377      	TST  R23
0001a9 f412      	BRPL __CDF11
0001aa 9400      	COM  R0
0001ab d0c6      	RCALL __ANEGD1
                 __CDF11:
0001ac 2e17      	MOV  R1,R23
0001ad e17e      	LDI  R23,30
0001ae 2011      	TST  R1
                 __CDF12:
0001af f032      	BRMI __CDF13
0001b0 957a      	DEC  R23
0001b1 0fee      	LSL  R30
0001b2 1fff      	ROL  R31
0001b3 1f66      	ROL  R22
0001b4 1c11      	ROL  R1
0001b5 cff9      	RJMP __CDF12
                 __CDF13:
0001b6 2fef      	MOV  R30,R31
0001b7 2ff6      	MOV  R31,R22
0001b8 2d61      	MOV  R22,R1
0001b9 935f      	PUSH R21
0001ba df8a      	RCALL __REPACK
0001bb 915f      	POP  R21
                 __CDF10:
0001bc 9508      	RET
                 
                 __SWAPACC:
0001bd 934f      	PUSH R20
0001be 01af      	MOVW R20,R30
0001bf 01fd      	MOVW R30,R26
0001c0 01da      	MOVW R26,R20
0001c1 01ab      	MOVW R20,R22
0001c2 01bc      	MOVW R22,R24
0001c3 01ca      	MOVW R24,R20
0001c4 2d40      	MOV  R20,R0
0001c5 2c01      	MOV  R0,R1
0001c6 2e14      	MOV  R1,R20
0001c7 914f      	POP  R20
0001c8 9508      	RET
                 
                 __UADD12:
0001c9 0fea      	ADD  R30,R26
0001ca 1ffb      	ADC  R31,R27
0001cb 1f68      	ADC  R22,R24
0001cc 9508      	RET
                 
                 __NEGMAN1:
0001cd 95e0      	COM  R30
0001ce 95f0      	COM  R31
0001cf 9560      	COM  R22
0001d0 5fef      	SUBI R30,-1
0001d1 4fff      	SBCI R31,-1
0001d2 4f6f      	SBCI R22,-1
0001d3 9508      	RET
                 
                 __ADDF12:
0001d4 935f      	PUSH R21
0001d5 df81      	RCALL __UNPACK
0001d6 3890      	CPI  R25,0x80
0001d7 f139      	BREQ __ADDF129
                 
                 __ADDF120:
0001d8 3870      	CPI  R23,0x80
0001d9 f121      	BREQ __ADDF128
                 __ADDF121:
0001da 2f57      	MOV  R21,R23
0001db 1b59      	SUB  R21,R25
0001dc f12b      	BRVS __ADDF1211
0001dd f412      	BRPL __ADDF122
0001de dfde      	RCALL __SWAPACC
0001df cffa      	RJMP __ADDF121
                 __ADDF122:
0001e0 3158      	CPI  R21,24
0001e1 f018      	BRLO __ADDF123
0001e2 27aa      	CLR  R26
0001e3 27bb      	CLR  R27
0001e4 2788      	CLR  R24
                 __ADDF123:
0001e5 3058      	CPI  R21,8
0001e6 f028      	BRLO __ADDF124
0001e7 2fab      	MOV  R26,R27
0001e8 2fb8      	MOV  R27,R24
0001e9 2788      	CLR  R24
0001ea 5058      	SUBI R21,8
0001eb cff9      	RJMP __ADDF123
                 __ADDF124:
0001ec 2355      	TST  R21
0001ed f029      	BREQ __ADDF126
                 __ADDF125:
0001ee 9586      	LSR  R24
0001ef 95b7      	ROR  R27
0001f0 95a7      	ROR  R26
0001f1 955a      	DEC  R21
0001f2 f7d9      	BRNE __ADDF125
                 __ADDF126:
0001f3 2d50      	MOV  R21,R0
0001f4 2551      	EOR  R21,R1
0001f5 f072      	BRMI __ADDF127
0001f6 dfd2      	RCALL __UADD12
0001f7 f438      	BRCC __ADDF129
0001f8 9567      	ROR  R22
0001f9 95f7      	ROR  R31
0001fa 95e7      	ROR  R30
0001fb 9573      	INC  R23
0001fc f413      	BRVC __ADDF129
0001fd c020      	RJMP __MAXRES
                 __ADDF128:
0001fe dfbe      	RCALL __SWAPACC
                 __ADDF129:
0001ff df45      	RCALL __REPACK
000200 915f      	POP  R21
000201 9508      	RET
                 __ADDF1211:
000202 f7d8      	BRCC __ADDF128
000203 cffb      	RJMP __ADDF129
                 __ADDF127:
000204 1bea      	SUB  R30,R26
000205 0bfb      	SBC  R31,R27
000206 0b68      	SBC  R22,R24
000207 f051      	BREQ __ZERORES
000208 f410      	BRCC __ADDF1210
000209 9400      	COM  R0
00020a dfc2      	RCALL __NEGMAN1
                 __ADDF1210:
00020b 2366      	TST  R22
00020c f392      	BRMI __ADDF129
00020d 0fee      	LSL  R30
00020e 1fff      	ROL  R31
00020f 1f66      	ROL  R22
000210 957a      	DEC  R23
000211 f7cb      	BRVC __ADDF1210
                 
                 __ZERORES:
000212 27ee      	CLR  R30
000213 27ff      	CLR  R31
000214 2766      	CLR  R22
000215 2777      	CLR  R23
000216 915f      	POP  R21
000217 9508      	RET
                 
                 __MINRES:
000218 efef      	SER  R30
000219 efff      	SER  R31
00021a e76f      	LDI  R22,0x7F
00021b ef7f      	SER  R23
00021c 915f      	POP  R21
00021d 9508      	RET
                 
                 __MAXRES:
00021e efef      	SER  R30
00021f efff      	SER  R31
000220 e76f      	LDI  R22,0x7F
000221 e77f      	LDI  R23,0x7F
000222 915f      	POP  R21
000223 9508      	RET
                 
                 __MULF12:
000224 935f      	PUSH R21
000225 df31      	RCALL __UNPACK
000226 3870      	CPI  R23,0x80
000227 f351      	BREQ __ZERORES
000228 3890      	CPI  R25,0x80
000229 f341      	BREQ __ZERORES
00022a 2401      	EOR  R0,R1
00022b 9408      	SEC
00022c 1f79      	ADC  R23,R25
00022d f423      	BRVC __MULF124
00022e f31c      	BRLT __ZERORES
                 __MULF125:
00022f 2000      	TST  R0
000230 f33a      	BRMI __MINRES
000231 cfec      	RJMP __MAXRES
                 __MULF124:
000232 920f      	PUSH R0
000233 931f      	PUSH R17
000234 932f      	PUSH R18
000235 933f      	PUSH R19
000236 934f      	PUSH R20
000237 2711      	CLR  R17
000238 2722      	CLR  R18
000239 2799      	CLR  R25
00023a 9f68      	MUL  R22,R24
00023b 01a0      	MOVW R20,R0
00023c 9f8f      	MUL  R24,R31
00023d 2d30      	MOV  R19,R0
00023e 0d41      	ADD  R20,R1
00023f 1f59      	ADC  R21,R25
000240 9f6b      	MUL  R22,R27
000241 0d30      	ADD  R19,R0
000242 1d41      	ADC  R20,R1
000243 1f59      	ADC  R21,R25
000244 9f8e      	MUL  R24,R30
000245 d027      	RCALL __MULF126
000246 9fbf      	MUL  R27,R31
000247 d025      	RCALL __MULF126
000248 9f6a      	MUL  R22,R26
000249 d023      	RCALL __MULF126
00024a 9fbe      	MUL  R27,R30
00024b d01d      	RCALL __MULF127
00024c 9faf      	MUL  R26,R31
00024d d01b      	RCALL __MULF127
00024e 9fae      	MUL  R26,R30
00024f 0d11      	ADD  R17,R1
000250 1f29      	ADC  R18,R25
000251 1f39      	ADC  R19,R25
000252 1f49      	ADC  R20,R25
000253 1f59      	ADC  R21,R25
000254 2fe3      	MOV  R30,R19
000255 2ff4      	MOV  R31,R20
000256 2f65      	MOV  R22,R21
000257 2f52      	MOV  R21,R18
000258 914f      	POP  R20
000259 913f      	POP  R19
00025a 912f      	POP  R18
00025b 911f      	POP  R17
00025c 900f      	POP  R0
00025d 2366      	TST  R22
00025e f02a      	BRMI __MULF122
00025f 0f55      	LSL  R21
000260 1fee      	ROL  R30
000261 1fff      	ROL  R31
000262 1f66      	ROL  R22
000263 c002      	RJMP __MULF123
                 __MULF122:
000264 9573      	INC  R23
000265 f24b      	BRVS __MULF125
                 __MULF123:
000266 ded4      	RCALL __ROUND_REPACK
000267 915f      	POP  R21
000268 9508      	RET
                 
                 __MULF127:
000269 0d10      	ADD  R17,R0
00026a 1d21      	ADC  R18,R1
00026b 1f39      	ADC  R19,R25
00026c c002      	RJMP __MULF128
                 __MULF126:
00026d 0d20      	ADD  R18,R0
00026e 1d31      	ADC  R19,R1
                 __MULF128:
00026f 1f49      	ADC  R20,R25
000270 1f59      	ADC  R21,R25
000271 9508      	RET
                 
                 __ANEGD1:
000272 95f0      	COM  R31
000273 9560      	COM  R22
000274 9570      	COM  R23
000275 95e1      	NEG  R30
000276 4fff      	SBCI R31,-1
000277 4f6f      	SBCI R22,-1
000278 4f7f      	SBCI R23,-1
000279 9508      	RET
                 
                 __LSLB12:
00027a 23ee      	TST  R30
00027b 2e0e      	MOV  R0,R30
00027c 2fea      	MOV  R30,R26
00027d f019      	BREQ __LSLB12R
                 __LSLB12L:
00027e 0fee      	LSL  R30
00027f 940a      	DEC  R0
000280 f7e9      	BRNE __LSLB12L
                 __LSLB12R:
000281 9508      	RET
                 
                 __CWD1:
000282 2f6f      	MOV  R22,R31
000283 0f66      	ADD  R22,R22
000284 0b66      	SBC  R22,R22
000285 2f76      	MOV  R23,R22
000286 9508      	RET
                 
                 __PUTD1S0:
000287 83e8      	ST   Y,R30
000288 83f9      	STD  Y+1,R31
000289 836a      	STD  Y+2,R22
00028a 837b      	STD  Y+3,R23
00028b 9508      	RET
                 
                 __SAVELOCR4:
00028c 933a      	ST   -Y,R19
                 __SAVELOCR3:
00028d 932a      	ST   -Y,R18
                 __SAVELOCR2:
00028e 931a      	ST   -Y,R17
00028f 930a      	ST   -Y,R16
000290 9508      	RET
                 
                 __LOADLOCR4:
000291 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000292 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000293 8119      	LDD  R17,Y+1
000294 8108      	LD   R16,Y
000295 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega328P register use summary:
r0 :  22 r1 :  24 r2 :   0 r3 :   0 r4 :   0 r5 :   0 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:  10 r17:  13 r18:  16 r19:  16 r20:  16 r21:  55 r22:  42 r23:  36 
r24:  25 r25:  25 r26:  27 r27:  16 r28:   4 r29:   1 r30: 119 r31:  30 
x  :   2 y  :  14 z  :   0 
Registers used: 20 out of 35 (57.1%)

ATmega328P instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  17 add   :   7 
adiw  :   4 and   :   5 andi  :   1 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   4 brcs  :   0 break :   0 breq  :  21 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   7 
brlt  :   1 brmi  :   6 brne  :  13 brpl  :   5 brsh  :   6 brtc  :   1 
brts  :   1 brvc  :   3 brvs  :   3 bset  :   0 bst   :   0 call  :  12 
cbi   :   0 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  18 cls   :   0 clt   :   2 clv   :   0 clz   :   0 com   :  11 
cp    :   0 cpc   :   5 cpi   :  28 cpse  :   0 dec   :   8 des   :   0 
eor   :   5 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   2 inc   :   2 jmp   :  27 ld    :   2 ldd   :   3 ldi   :  73 
lds   :   5 lpm   :   0 lsl   :  11 lsr   :   2 mov   :  29 movw  :   7 
mul   :   9 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   4 
ori   :   3 out   :  19 pop   :  13 push  :  12 rcall :  32 ret   :  25 
reti  :   0 rjmp  :  31 rol   :  13 ror   :  12 sbc   :   3 sbci  :  11 
sbi   :   1 sbic  :   0 sbis  :   0 sbiw  :   5 sbr   :   0 sbrc  :   0 
sbrs  :   1 sec   :   1 seh   :   0 sei   :   0 sen   :   0 ser   :   8 
ses   :   0 set   :   2 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :   8 std   :   3 sts   :   9 sub   :   3 subi  :   7 swap  :   0 
tst   :  12 wdr   :   1 
Instructions used: 65 out of 116 (56.0%)

ATmega328P memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00052c   1324      0   1324   32768   4.0%
[.dseg] 0x000100 0x000300      0      0      0    2048   0.0%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 0 warnings
